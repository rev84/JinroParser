// Generated by CoffeeScript 1.9.3
var Jinro;

Array.prototype.shuffle = function() {
  var i, j, t;
  i = this.length;
  while (i) {
    j = Math.floor(Math.random() * i);
    t = this[--i];
    this[i] = this[j];
    this[j] = t;
  }
  return this;
};

Jinro = (function() {
  Jinro.prototype.CONST = {
    JOBS: {
      MURABITO: "murabito",
      URANAI: "uranai",
      REINO: "reino",
      KARIUDO: "kariudo",
      KYOUYU: "kyouyu",
      NEKOMATA: "nekomata",
      JINRO: "jinro",
      KYOJIN: "kyojin",
      YOUKO: "youko",
      HAITOKU: "haitoku"
    }
  };

  Jinro.prototype.memberCount = null;

  Jinro.prototype.jobCount = null;

  Jinro.prototype.index2name = {};

  Jinro.prototype.name2index = {};

  Jinro.prototype.uranaiCO = {};

  Jinro.prototype.reinouCO = {};

  Jinro.prototype.result = [];

  function Jinro() {
    this.setJobCount();
    this.setMemberName();
    this.setUranaiCO();
    this.setReinouCO();
  }

  Jinro.prototype.calc = function(count) {
    var i, job, jobs, k, memberIndex, ref, results;
    this.initResult();
    results = [];
    for (i = k = 0, ref = count; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      jobs = this.getRandomJob();
      if (this.judge(jobs)) {
        results.push((function() {
          var l, len, results1;
          results1 = [];
          for (memberIndex = l = 0, len = jobs.length; l < len; memberIndex = ++l) {
            job = jobs[memberIndex];
            results1.push(this.result[memberIndex][job]++);
          }
          return results1;
        }).call(this));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  Jinro.prototype.judge = function(jobs) {
    var jobName, k, len, memberIndex;
    for (memberIndex = k = 0, len = jobs.length; k < len; memberIndex = ++k) {
      jobName = jobs[memberIndex];
      switch (jobName) {
        case this.CONST.JOBS.MURABITO:
          if (!this.checkMurabito(jobs, memberIndex)) {
            return false;
          }
          break;
        case this.CONST.JOBS.URANAI:
          if (!this.checkUranai(jobs, memberIndex)) {
            return false;
          }
          break;
        case this.CONST.JOBS.REINO:
          if (!this.checkReinou(jobs, memberIndex)) {
            return false;
          }
          break;
        case this.CONST.JOBS.KARIUDO:
          if (!this.checkKariudo(jobs, memberIndex)) {
            return false;
          }
          break;
        case this.CONST.JOBS.KYOUYU:
          if (!this.checkKyouyu(jobs, memberIndex)) {
            return false;
          }
          break;
        case this.CONST.JOBS.NEKOMATA:
          if (!this.checkNekomata(jobs, memberIndex)) {
            return false;
          }
          break;
        case this.CONST.JOBS.JINRO:
          if (!this.checkJinro(jobs, memberIndex)) {
            return false;
          }
          break;
        case this.CONST.JOBS.KYOJIN:
          if (!this.checkKyojin(jobs, memberIndex)) {
            return false;
          }
          break;
        case this.CONST.JOBS.YOUKO:
          if (!this.checkYouko(jobs, memberIndex)) {
            return false;
          }
          break;
        case this.CONST.JOBS.HAITOKU:
          if (!this.checkHaitoku(jobs, memberIndex)) {
            return false;
          }
      }
    }
    return true;
  };

  Jinro.prototype.checkMurabito = function(jobs, memberIndex) {
    if (this.uranaiCO[memberIndex] != null) {
      return false;
    }
    if (this.reinouCO[memberIndex] != null) {
      return false;
    }
    return true;
  };

  Jinro.prototype.checkUranai = function(jobs, memberIndex) {
    var isMurabito, k, len, ref, targetIndex, value;
    if (this.uranaiCO[memberIndex] == null) {
      return false;
    }
    ref = this.uranaiCO[memberIndex];
    for (k = 0, len = ref.length; k < len; k++) {
      value = ref[k];
      targetIndex = value[0], isMurabito = value[1];
      if (this.isMurabitoSide(jobs[targetIndex]) !== isMurabito) {
        return false;
      }
    }
    return true;
  };

  Jinro.prototype.checkReinou = function(jobs, memberIndex) {
    var isMurabito, k, len, ref, targetIndex, value;
    if (this.reinouCO[memberIndex] == null) {
      return false;
    }
    ref = this.reinouCO[memberIndex];
    for (k = 0, len = ref.length; k < len; k++) {
      value = ref[k];
      targetIndex = value[0], isMurabito = value[1];
      if (this.isMurabitoSide(jobs[targetIndex]) !== isMurabito) {
        return false;
      }
    }
    return true;
  };

  Jinro.prototype.checkKariudo = function(jobs, memberIndex) {
    if (this.uranaiCO[memberIndex] != null) {
      return false;
    }
    if (this.reinouCO[memberIndex] != null) {
      return false;
    }
    return true;
  };

  Jinro.prototype.checkKyouyu = function(jobs, memberIndex) {
    if (this.uranaiCO[memberIndex] != null) {
      return false;
    }
    if (this.reinouCO[memberIndex] != null) {
      return false;
    }
    return true;
  };

  Jinro.prototype.checkNekomata = function(jobs, memberIndex) {
    if (this.uranaiCO[memberIndex] != null) {
      return false;
    }
    if (this.reinouCO[memberIndex] != null) {
      return false;
    }
    return true;
  };

  Jinro.prototype.checkJinro = function(jobs, memberIndex) {};

  Jinro.prototype.checkKyojin = function(jobs, memberIndex) {
    if (this.uranaiCO[memberIndex] != null) {
      return false;
    }
    if (this.reinouCO[memberIndex] != null) {
      return false;
    }
    return true;
  };

  Jinro.prototype.checkYouko = function(jobs, memberIndex) {
    return true;
  };

  Jinro.prototype.checkHaitoku = function(jobs, memberIndex) {
    return true;
  };

  Jinro.prototype.initResult = function() {
    var i, jobSet, k, key, ref, ref1, results, value;
    this.result = [];
    jobSet = {};
    ref = this.CONST.JOBS;
    for (key in ref) {
      value = ref[key];
      jobSet[value] = 0;
    }
    results = [];
    for (i = k = 0, ref1 = this.memberCount; 0 <= ref1 ? k < ref1 : k > ref1; i = 0 <= ref1 ? ++k : --k) {
      results.push(this.result[i] = jobSet);
    }
    return results;
  };

  Jinro.prototype.setMemberName = function() {
    var k, key, len, memberCount, ref, value;
    this.index2name = $('#jinmei').val().split("\n");
    memberCount = 0;
    ref = this.index2name;
    for (key = k = 0, len = ref.length; k < len; key = ++k) {
      value = ref[key];
      this.name2index[value] = key;
      memberCount++;
    }
    return this.memberCount = memberCount;
  };

  Jinro.prototype.setJobCount = function() {
    var key, ref, res, value;
    res = {};
    ref = this.CONST.JOBS;
    for (value in ref) {
      key = ref[value];
      res[value] = Number($('#' + value).val());
    }
    return this.jobCount = res;
  };

  Jinro.prototype.setUranaiCO = function() {
    var hantei, k, len, line, lines, name, results, stacks, targetName, uranai;
    lines = $('#uranaiCO').val().split("\n");
    results = [];
    for (k = 0, len = lines.length; k < len; k++) {
      line = lines[k];
      stacks = line.split("/");
      name = stacks.shift();
      this.uranaiCO[this.name2index[name]] = [];
      results.push((function() {
        var l, len1, results1;
        results1 = [];
        for (l = 0, len1 = stacks.length; l < len1; l++) {
          uranai = stacks[l];
          targetName = uranai.substr(0, uranai.length - 1);
          hantei = uranai.substr(uranai.length - 1, 1);
          results1.push(this.uranaiCO[this.name2index[name]].push([this.name2index[targetName], (hantei === "○" ? true : false)]));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  Jinro.prototype.setReinouCO = function() {
    var hantei, k, len, line, lines, name, results, stacks, targetName, uranai;
    lines = $('#reinouCO').val().split("\n");
    results = [];
    for (k = 0, len = lines.length; k < len; k++) {
      line = lines[k];
      stacks = line.split("/");
      name = stacks.shift();
      this.reinouCO[this.name2index[name]] = [];
      results.push((function() {
        var l, len1, results1;
        results1 = [];
        for (l = 0, len1 = stacks.length; l < len1; l++) {
          uranai = stacks[l];
          targetName = uranai.substr(0, uranai.length - 1);
          hantei = uranai.substr(uranai.length - 1, 1);
          results1.push(this.reinouCO[this.name2index[name]].push([this.name2index[targetName], (hantei === "○" ? true : false)]));
        }
        return results1;
      }).call(this));
    }
    return results;
  };

  Jinro.prototype.getRandomJob = function() {
    var i, jobArray, jobName, jobs, k, num, ref;
    jobs = this.getJobCount();
    jobArray = [];
    for (jobName in jobs) {
      num = jobs[jobName];
      for (i = k = 0, ref = num; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
        jobArray.push(jobName);
      }
    }
    return jobArray.shuffle();
  };

  Jinro.prototype.isMurabitoSide = function(jobName) {
    if (jobName === this.CONST.JOBS.JINRO) {
      return false;
    }
    return true;
  };

  return Jinro;

})();
